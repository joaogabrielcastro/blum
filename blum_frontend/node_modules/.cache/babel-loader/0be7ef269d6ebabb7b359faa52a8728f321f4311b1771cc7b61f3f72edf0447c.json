{"ast":null,"code":"const API_URL = 'http://localhost:3000/api/v1';\nconst apiService = {\n  getClients: async () => {\n    const response = await fetch(`${API_URL}/clients`);\n    if (!response.ok) throw new Error('Erro ao buscar clientes.');\n    return response.json();\n  },\n  createClient: async newClientData => {\n    const response = await fetch(`${API_URL}/clients`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newClientData)\n    });\n    if (!response.ok) throw new Error('Erro ao criar cliente.');\n    return response.json();\n  },\n  getProducts: async (brand = 'all') => {\n    const query = brand !== 'all' ? `?brand=${brand}` : '';\n    const response = await fetch(`${API_URL}/products${query}`);\n    if (!response.ok) throw new Error('Erro ao buscar produtos.');\n    return response.json();\n  },\n  createProduct: async newProductData => {\n    const response = await fetch(`${API_URL}/products`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newProductData)\n    });\n    if (!response.ok) throw new Error('Erro ao criar produto.');\n    return response.json();\n  },\n  getOrders: async userId => {\n    const response = await fetch(`${API_URL}/orders?userId=${userId}`);\n    if (!response.ok) throw new Error('Erro ao buscar pedidos.');\n    return response.json();\n  },\n  createOrder: async newOrderData => {\n    const response = await fetch(`${API_URL}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newOrderData)\n    });\n    if (!response.ok) throw new Error('Erro ao criar pedido.');\n    return response.json();\n  },\n  deleteOrder: async orderId => {\n    const response = await fetch(`${API_URL}/orders/${orderId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Erro ao excluir pedido.');\n  },\n  finalizeOrder: async orderId => {\n    const response = await fetch(`${API_URL}/orders/${orderId}/finalize`, {\n      method: 'PUT'\n    });\n    if (!response.ok) throw new Error('Erro ao finalizar pedido.');\n    return response.json();\n  },\n  getSalesByRep: async () => {\n    const response = await fetch(`${API_URL}/reports/sales-by-rep`);\n    if (!response.ok) throw new Error('Erro ao buscar relatório de vendas por representante.');\n    return response.json();\n  },\n  checkStatus: async () => {\n    const response = await fetch(`${API_URL}/status`);\n    if (!response.ok) throw new Error('Erro ao verificar status do servidor.');\n    return response.json();\n  },\n  getDashboardStats: async () => {\n    const response = await fetch(`${API_URL}/reports/dashboard-stats`);\n    if (!response.ok) throw new Error('Erro ao buscar estatísticas do dashboard.');\n    return response.json();\n  }\n};\nexport default apiService;","map":{"version":3,"names":["API_URL","apiService","getClients","response","fetch","ok","Error","json","createClient","newClientData","method","headers","body","JSON","stringify","getProducts","brand","query","createProduct","newProductData","getOrders","userId","createOrder","newOrderData","deleteOrder","orderId","finalizeOrder","getSalesByRep","checkStatus","getDashboardStats"],"sources":["C:/Users/joaow/BLUM/blum_frontend/src/apiService.js"],"sourcesContent":["const API_URL = 'http://localhost:3000/api/v1';\r\n\r\nconst apiService = {\r\n  getClients: async () => {\r\n    const response = await fetch(`${API_URL}/clients`);\r\n    if (!response.ok) throw new Error('Erro ao buscar clientes.');\r\n    return response.json();\r\n  },\r\n  createClient: async (newClientData) => {\r\n    const response = await fetch(`${API_URL}/clients`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(newClientData),\r\n    });\r\n    if (!response.ok) throw new Error('Erro ao criar cliente.');\r\n    return response.json();\r\n  },\r\n  getProducts: async (brand = 'all') => {\r\n    const query = brand !== 'all' ? `?brand=${brand}` : '';\r\n    const response = await fetch(`${API_URL}/products${query}`);\r\n    if (!response.ok) throw new Error('Erro ao buscar produtos.');\r\n    return response.json();\r\n  },\r\n  createProduct: async (newProductData) => {\r\n    const response = await fetch(`${API_URL}/products`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(newProductData),\r\n    });\r\n    if (!response.ok) throw new Error('Erro ao criar produto.');\r\n    return response.json();\r\n  },\r\n  getOrders: async (userId) => {\r\n    const response = await fetch(`${API_URL}/orders?userId=${userId}`);\r\n    if (!response.ok) throw new Error('Erro ao buscar pedidos.');\r\n    return response.json();\r\n  },\r\n  createOrder: async (newOrderData) => {\r\n    const response = await fetch(`${API_URL}/orders`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(newOrderData),\r\n    });\r\n    if (!response.ok) throw new Error('Erro ao criar pedido.');\r\n    return response.json();\r\n  },\r\n  deleteOrder: async (orderId) => {\r\n    const response = await fetch(`${API_URL}/orders/${orderId}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) throw new Error('Erro ao excluir pedido.');\r\n  },\r\n  finalizeOrder: async (orderId) => {\r\n    const response = await fetch(`${API_URL}/orders/${orderId}/finalize`, {\r\n      method: 'PUT',\r\n    });\r\n    if (!response.ok) throw new Error('Erro ao finalizar pedido.');\r\n    return response.json();\r\n  },\r\n  getSalesByRep: async () => {\r\n    const response = await fetch(`${API_URL}/reports/sales-by-rep`);\r\n    if (!response.ok) throw new Error('Erro ao buscar relatório de vendas por representante.');\r\n    return response.json();\r\n  },\r\n  checkStatus: async () => {\r\n  const response = await fetch(`${API_URL}/status`);\r\n  if (!response.ok) throw new Error('Erro ao verificar status do servidor.');\r\n  return response.json();\r\n},\r\n\r\ngetDashboardStats: async () => {\r\n  const response = await fetch(`${API_URL}/reports/dashboard-stats`);\r\n  if (!response.ok) throw new Error('Erro ao buscar estatísticas do dashboard.');\r\n  return response.json();\r\n}\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}