{"ast":null,"code":"const API_URL = \"http://localhost:3000/api/v1\";\nconst apiService = {\n  getClients: async () => {\n    const response = await fetch(`${API_URL}/clients`);\n    if (!response.ok) throw new Error(\"Erro ao buscar clientes.\");\n    return response.json();\n  },\n  createClient: async newClientData => {\n    const response = await fetch(`${API_URL}/clients`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newClientData)\n    });\n    if (!response.ok) throw new Error(\"Erro ao criar cliente.\");\n    return response.json();\n  },\n  getProducts: async (brand = \"all\") => {\n    const query = brand !== \"all\" ? `?brand=${brand}` : \"\";\n    const response = await fetch(`${API_URL}/products${query}`);\n    if (!response.ok) throw new Error(\"Erro ao buscar produtos.\");\n    return response.json();\n  },\n  createProduct: async newProductData => {\n    const response = await fetch(`${API_URL}/products`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newProductData)\n    });\n    if (!response.ok) throw new Error(\"Erro ao criar produto.\");\n    return response.json();\n  },\n  getOrders: async userId => {\n    const url = userId ? `${API_URL}/orders?userId=${userId}` : `${API_URL}/orders`;\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(\"Erro ao buscar pedidos.\");\n    return response.json();\n  },\n  createOrder: async newOrderData => {\n    const response = await fetch(`${API_URL}/orders`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newOrderData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || \"Erro ao criar pedido.\");\n    }\n    return data;\n  },\n  deleteOrder: async orderId => {\n    const response = await fetch(`${API_URL}/orders/${orderId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Erro ao excluir pedido.\");\n  },\n  finalizeOrder: async orderId => {\n    const response = await fetch(`${API_URL}/orders/${orderId}/finalize`, {\n      method: \"PUT\"\n    });\n    if (!response.ok) throw new Error(\"Erro ao finalizar pedido.\");\n    return response.json();\n  },\n  getSalesByRep: async () => {\n    const response = await fetch(`${API_URL}/reports/sales-by-rep`);\n    if (!response.ok) throw new Error(\"Erro ao buscar relatório de vendas por representante.\");\n    return response.json();\n  },\n  getBrands: async () => {\n    const response = await fetch(`${API_URL}/brands`);\n    if (!response.ok) throw new Error(\"Erro ao buscar marcas.\");\n    return response.json();\n  },\n  createBrand: async newBrandData => {\n    const response = await fetch(`${API_URL}/brands`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newBrandData)\n    });\n    if (!response.ok) throw new Error(\"Erro ao criar marca.\");\n    return response.json();\n  },\n  getStatus: async () => {\n    const response = await fetch(`${API_URL}/status`);\n    if (!response.ok) {\n      throw new Error(\"Erro ao buscar o status da API.\");\n    }\n    return response.json();\n  },\n  queryCNPJ: async cnpj => {\n    const response = await fetch(`${CNPJ_API_URL}/${cnpj}`);\n    if (!response.ok) throw new Error(\"Erro ao consultar CNPJ.\");\n    return response.json();\n  }\n};\nexport default apiService;","map":{"version":3,"names":["API_URL","apiService","getClients","response","fetch","ok","Error","json","createClient","newClientData","method","headers","body","JSON","stringify","getProducts","brand","query","createProduct","newProductData","getOrders","userId","url","createOrder","newOrderData","data","message","deleteOrder","orderId","finalizeOrder","getSalesByRep","getBrands","createBrand","newBrandData","getStatus","queryCNPJ","cnpj","CNPJ_API_URL"],"sources":["C:/Users/joaow/blum/blum_frontend/src/apiService.jsx"],"sourcesContent":["const API_URL = \"http://localhost:3000/api/v1\";\r\n\r\nconst apiService = {\r\n  getClients: async () => {\r\n    const response = await fetch(`${API_URL}/clients`);\r\n    if (!response.ok) throw new Error(\"Erro ao buscar clientes.\");\r\n    return response.json();\r\n  },\r\n  createClient: async (newClientData) => {\r\n    const response = await fetch(`${API_URL}/clients`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(newClientData),\r\n    });\r\n    if (!response.ok) throw new Error(\"Erro ao criar cliente.\");\r\n    return response.json();\r\n  },\r\n  getProducts: async (brand = \"all\") => {\r\n    const query = brand !== \"all\" ? `?brand=${brand}` : \"\";\r\n    const response = await fetch(`${API_URL}/products${query}`);\r\n    if (!response.ok) throw new Error(\"Erro ao buscar produtos.\");\r\n    return response.json();\r\n  },\r\n  createProduct: async (newProductData) => {\r\n    const response = await fetch(`${API_URL}/products`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(newProductData),\r\n    });\r\n    if (!response.ok) throw new Error(\"Erro ao criar produto.\");\r\n    return response.json();\r\n  },\r\n  getOrders: async (userId) => {\r\n    const url = userId\r\n      ? `${API_URL}/orders?userId=${userId}`\r\n      : `${API_URL}/orders`;\r\n    const response = await fetch(url);\r\n    if (!response.ok) throw new Error(\"Erro ao buscar pedidos.\");\r\n    return response.json();\r\n  },\r\n  createOrder: async (newOrderData) => {\r\n    const response = await fetch(`${API_URL}/orders`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(newOrderData),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || \"Erro ao criar pedido.\");\r\n    }\r\n\r\n    return data;\r\n  },\r\n  deleteOrder: async (orderId) => {\r\n    const response = await fetch(`${API_URL}/orders/${orderId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok) throw new Error(\"Erro ao excluir pedido.\");\r\n  },\r\n  finalizeOrder: async (orderId) => {\r\n    const response = await fetch(`${API_URL}/orders/${orderId}/finalize`, {\r\n      method: \"PUT\",\r\n    });\r\n    if (!response.ok) throw new Error(\"Erro ao finalizar pedido.\");\r\n    return response.json();\r\n  },\r\n  getSalesByRep: async () => {\r\n    const response = await fetch(`${API_URL}/reports/sales-by-rep`);\r\n    if (!response.ok)\r\n      throw new Error(\"Erro ao buscar relatório de vendas por representante.\");\r\n    return response.json();\r\n  },\r\n  getBrands: async () => {\r\n    const response = await fetch(`${API_URL}/brands`);\r\n    if (!response.ok) throw new Error(\"Erro ao buscar marcas.\");\r\n    return response.json();\r\n  },\r\n  createBrand: async (newBrandData) => {\r\n    const response = await fetch(`${API_URL}/brands`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(newBrandData),\r\n    });\r\n    if (!response.ok) throw new Error(\"Erro ao criar marca.\");\r\n    return response.json();\r\n  },\r\n  getStatus: async () => {\r\n    const response = await fetch(`${API_URL}/status`);\r\n    if (!response.ok) {\r\n      throw new Error(\"Erro ao buscar o status da API.\");\r\n    }\r\n    return response.json();\r\n  },\r\n  queryCNPJ: async (cnpj) => {\r\n    const response = await fetch(`${CNPJ_API_URL}/${cnpj}`);\r\n    if (!response.ok) throw new Error(\"Erro ao consultar CNPJ.\");\r\n    return response.json();\r\n  },\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}